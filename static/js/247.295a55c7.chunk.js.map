{"version":3,"file":"static/js/247.295a55c7.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kFACCC,EADD,sCACsCH,EADtC,iBACsDE,GADtD,SAGkBH,EAAAA,EAAAA,IAAUI,GAH5B,uBAGGC,EAHH,EAGGA,KAHH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACCJ,EADD,iBACiBI,EADjB,oBAC+BP,GAD/B,SAGkBD,EAAAA,EAAAA,IAAUI,GAH5B,uBAGGC,EAHH,EAGGA,KAHH,kBAIEA,GAJF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFACCN,EADD,gCACgCH,EADhC,kBACiDS,GADjD,SAGkBV,EAAAA,EAAAA,IAAUI,GAH5B,uBAGGC,EAHH,EAGGA,KAHH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kFACCJ,EADD,iBACiBI,EADjB,4BACuCP,GADvC,SAGkBD,EAAAA,EAAAA,IAAUI,GAH5B,uBAGGC,EAHH,EAGGA,KAHH,kBAIEA,EAAKO,MAJP,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,kFACCJ,EADD,iBACiBI,EADjB,4BACuCP,GADvC,SAGkBD,EAAAA,EAAAA,IAAUI,GAH5B,uBAGGC,EAHH,EAGGA,KAHH,kBAIEA,EAAKC,SAJP,kE,0HC4BP,UAxDa,WACX,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaK,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BP,EAAAA,EAAAA,IAAgBG,GAF3C,OAEUK,EAFV,OAIIF,EAAQE,GAJZ,gDAMIC,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACR,KAGF,2BACGF,EAAKW,OAAS,IAAK,yEAEnBX,EAAKW,OAAS,IACb,eACEC,MAAO,CACLC,QAAS,OACTC,IAAK,GACLC,SAAU,OACVC,UAAW,OACXC,eAAgB,UANpB,SASGjB,EAAKkB,KAAI,gBAAGtB,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,aAA5B,OACR,gBAEET,MAAO,CACLU,MAAO,KAHX,WAME,gBACEC,KAAKC,EAAAA,EAAAA,GAAUH,GACfI,IAAKL,GAAQD,GAAiB,UAC9BP,MAAO,CACPc,WAAY,OACZC,YAAa,WAGf,wBAAKP,GAAQD,GAAiB,cAbzBvB,EAFC,QAsBnB,C,qECzDY4B,EAAY,SAAAI,GACvB,OAAa,OAATA,QAA0BC,IAATD,EACZE,EAGH,kCAAN,OAAyCF,EAC1C,C","sources":["TMDB_API/TMDB_API.jsx","components/Cast/Cast.jsx","images/images.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c12d1629a8931660f172279bfa95438c';\n\nexport async function getTrending(page) {\n  const url = `/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n\n  const { data } = await axios.get(url);\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const url = `/movie/${id}?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function searchMovies(query) {\n  const url = `/search/movie?api_key=${API_KEY}&query=${query}`;\n\n  const { data } = await axios.get(url);\n  return data.results;\n}\n\nexport async function getMovieCredits(id) {\n  const url = `/movie/${id}/credits?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const url = `/movie/${id}/reviews?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data.results;\n}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'TMDB_API/TMDB_API';\nimport { imagePast } from 'images/images';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    async function searchFilmsById() {\n      try {\n        const filmCast = await getMovieCredits(movieId);\n\n        setCast(filmCast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    searchFilmsById();\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast.length < 1 && <p>No information about the cast for this movie.</p>}\n\n      {cast.length > 0 && (\n        <ul\n          style={{\n            display: 'flex',\n            gap: 10,\n            flexWrap: 'wrap',\n            listStyle: 'none',\n            justifyContent: 'center',\n          }}\n        >\n          {cast.map(({ id, original_name, name, profile_path }) => (\n            <li\n              key={id}\n              style={{\n                width: 150,\n              }}\n            >\n              <img\n                src={imagePast(profile_path)}\n                alt={name || original_name || 'no info'}\n                style={{\n                marginLeft: 'auto',\n                marginRight: 'auto',\n              }}\n              />\n              <h4>{name || original_name || 'no info'}</h4>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;","import noFoto from './no-image-available.jpg';\n\nexport const imagePast = path => {\n  if (path === null || path === undefined) {\n    return noFoto;\n  }\n\n  return `https://image.tmdb.org/t/p/w300${path}`;\n};"],"names":["axios","API_KEY","getTrending","page","url","data","results","getMovieDetails","id","searchMovies","query","getMovieCredits","cast","getMovieReviews","movieId","useParams","useState","setCast","useEffect","filmCast","console","log","searchFilmsById","length","style","display","gap","flexWrap","listStyle","justifyContent","map","original_name","name","profile_path","width","src","imagePast","alt","marginLeft","marginRight","path","undefined","noFoto"],"sourceRoot":""}